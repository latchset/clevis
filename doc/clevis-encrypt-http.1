'\" t
.\"     Title: clevis-encrypt-http
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 07/12/2018
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "CLEVIS\-ENCRYPT\-HTT" "1" "07/12/2018" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
clevis-encrypt-http \- Encrypts using a REST HTTP escrow server policy
.SH "SYNOPSIS"
.sp
\fBclevis encrypt http\fR CONFIG < PT > JWE
.SH "OVERVIEW"
.sp
The \fBclevis encrypt http\fR command encrypts using a REST HTTP escrow server policy\&. Its only argument is the JSON configuration object\&.
.sp
When using the HTTP pin, we create a new, cryptographically\-strong, random key\&. This key is stored in a remote HTTP escrow server (using a simple PUT or POST)\&. Then at decryption time, we attempt to fetch the key back again in order to decrypt our data\&. So, for our configuration we need to pass the URL to the key location:
.sp
.if n \{\
.RS 4
.\}
.nf
$ clevis encrypt http \*(Aq{"url":"https://escrow\&.srv/1234"}\*(Aq < PT > JWE
.fi
.if n \{\
.RE
.\}
.sp
To decrypt the data, simply provide the ciphertext (JWE):
.sp
.if n \{\
.RS 4
.\}
.nf
$ clevis decrypt < JWE > PT
.fi
.if n \{\
.RE
.\}
.sp
Notice that we did not pass any configuration during decryption\&. The decrypt command extracted the URL (and possibly other configuration) from the JWE object, fetched the encryption key from the escrow and performed decryption\&.
.SH "CONFIG"
.sp
This command uses the following configuration properties:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBurl\fR
(string) : The URL where the key is stored (REQUIRED)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBhttp\fR
(boolean) : Allow or disallow non\-TLS HTTP (default: false)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBtype\fR
(string) : The type of key to store (default: octet\-stream)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBmethod\fR
(string) : The HTTP method to use (default: PUT)
.RE
.SH "SEE ALSO"
.sp
\fBclevis\-decrypt\fR(1)
