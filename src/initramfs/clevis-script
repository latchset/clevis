#!/bin/bash
# vim: set tabstop=8 shiftwidth=4 softtabstop=4 expandtab smarttab colorcolumn=80:
#
# Copyright (c) 2017 Red Hat, Inc.
# Copyright (c) 2017 Shawn Rose
# Copyright (c) 2017 Guilhem Moulin
#
# Author: Harald Hoyer <harald@redhat.com>
# Author: Nathaniel McCallum <npmccallum@redhat.com>
# Author: Shawn Rose <shawnandrewrose@gmail.com>
# Author: Guilhem Moulin <guilhem@guilhem.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

case $1 in
prereqs) exit 0;;
esac

# Return 0 if $pid has a file descriptor pointing to $name, and 1
# otherwise.
in_fds() {
    local  pid="$1" name="$2" fd
    for fd in $(find "/proc/$pid/fd" -type l); do
        [ "$(readlink -f "$fd")" != "$name" ] || return 0
    done
    return 1
}

# Print the PID of the askpass process with a file descriptor opened to
# /lib/cryptsetup/passfifo.
get_askpass_pid() {
    psinfo=$(ps) # Doing this so I don't end up matching myself
    echo "$psinfo" | awk "/$cryptkeyscript/ { print \$1 }" | while read pid; do
        if in_fds "$pid" "$PASSFIFO"; then
            echo "$pid"
            break
        fi
    done
}

# Wait for askpass, and then try and decrypt immediately.
clevisloop()
{
    set -e

    if [ -x /bin/plymouth ] && plymouth --ping; then
        cryptkeyscript='plymouth ask-for-password'
    else
        # This has to be escaped for awk
        cryptkeyscript='\/lib\/cryptsetup\/askpass'
    fi

    PASSFIFO='/lib/cryptsetup/passfifo'

    pid=$(get_askpass_pid)

    until [ "$pid" ] && [ -p "$PASSFIFO" ]; do
        sleep .1
        pid=$(get_askpass_pid)
    done

    # Import CRYPTTAB_SOURCE from the askpass process
    local $(grep '^CRYPTTAB_SOURCE=' /proc/$pid/environ)

    UUID=cb6e8904-81ff-40da-a84a-07ab9ab5715e
    luksmeta show -d "$CRYPTTAB_SOURCE" | while read -r slot state uuid; do
        [ "$state" != "active" ] && continue
        [ "$uuid" != "$UUID" ] && continue
        luksmeta load -d $CRYPTTAB_SOURCE -s $slot -u $UUID | clevis decrypt > $PASSFIFO
        break
    done
}

. /scripts/functions

configure_networking

clevisloop &