#!/bin/bash
set -euo pipefail

# zfs user properties are limited to 8192 bytes
zfs_userprop_value_limit=8000
zfs_userprop_name_limit=256

# all clevis userprops will be prefixed with "latchset.clevis:" as suggested by
# the User Properties section in zfsprops(8)
zfs_userprop_prefix='latchset.clevis'

# This contains the space-separated list of labels that have been bound with clevis
zfs_labels_prop="${zfs_userprop_prefix}:labels"

# The data for each label is saved into one or more zfs properties.
# E.g. the label 'mybinding' with data of 20k bytes and label 'other' with 4k bytes
# we suffix the label in the :labels property so we can easily find all numbered parts
# - latchset.clevis:labels = "mybinding:2 other"
# - latchset.clevis.label:mybinding-0 = "[clevis data first 8k]"
# - latchset.clevis.label:mybinding-1 = "[clevis data second 8k]"
# - latchset.clevis.label:mybinding-2 = "[clevis data final 4k]"
# - latchset.clevis.label:other = [clevis data 4k]
zfs_label_prefix="${zfs_userprop_prefix}.label"


# Interfacing functions with ZFS
################################
function zfs_remove_property() {
	local dataset="${1}"
	local property="${2}"
	zfs inherit "${property}" "${dataset}"
}

# valid characters of zfs user property names are: [0-9a-z:._-] (see zfsprops(7) )
function zfs_set_property() {
	local dataset="${1}"
	local property="${2}"
	local value="${3}"
	[[ "${#property}" -le "${zfs_userprop_name_limit}"  ]] || error "property name longer than ${zfs_userprop_name_limit} characters '${property}'"
	[[ "${#value}"    -le "${zfs_userprop_value_limit}" ]] || error "property value longer than ${zfs_userprop_value_limit} characters '${value}'"
	zfs set "${property}=${value}" "${dataset}"
}

# defaults to getting just the value of the given property and only when it is set directly on the dataset ("local")
function zfs_get_property() {
	local dataset="${1}"
	local property="${2}"
	shift 2
	zfs get "${property}" "${dataset}" -H -o value -slocal "${@}"
}

function zfs_load_key() {
	local dataset="${1}"
	local args=( "-L" "prompt" )
	if [[ -n "${2:-}" ]]; then
		args+=( "-n" )
	fi
	zfs load-key "${args[@]}" "${dataset}" >/dev/null
}

function zfs_test_key() {
	zfs_load_key "${1}" 'dry_run'
}

function zfs_unload_key() {
	local dataset="${1}"
	zfs unload-key "${dataset}" >/dev/null
}

# ZFS properties functions to deal with Clevis labels
##############################################

# valid characters of clevis-zfs labels are: [0-9a-z_]
function is_valid_label() {
	local label="${1}"
	# This length limit is quite arbitrary; (as is the removal of [:.-] )
	# but we have to draw the line somewhere and zfs-user-property names
	# can be at most 256 characters long.  We can't use all 256 characters
	# because we need some space in the property name for the
	# zfs_label_prefix and the chunk_counter suffix.
	local limit=100
	local regex='^[0-9a-z_]+$'

	if [[ "${#label}" -gt "${limit}" ]]; then
		echo >&2 "label is longer than ${limit} characters: ${label}"
		return 1
	fi

	if [[ "${label}" =~ ${regex} ]]; then
		return 0
	else
		echo >&2 "label is invalid: '${label}'. Valid characters: a-z, 0-9, _ (underscore)"
		return 1
	fi
}

# get a list of all labels, including possible number suffixes
function zfs_get_labels() {
	local dataset="${1}"
	zfs_get_property "${dataset}" "${zfs_labels_prop}"
}

# get a single label from the list of all labels,
# including possible number suffix
function zfs_get_label() {
	local dataset="${1}"
	local label="${2%%:*}"
	zfs_get_labels "${dataset}" | tr ' ' '\n' | grep -E "^${label}(:|$)"
}

# set the list of labels to the given value
function zfs_set_labels() {
	local dataset="${1}";
	local new_labels="${2}"
	zfs_set_property "${dataset}" "${zfs_labels_prop}" "${new_labels}"
}

# add a single label to the existing list of labels
function zfs_add_label() {
	local dataset="${1}"
	local new_label="${2}"
	local labels
	read -ra labels <<< "$(zfs_get_labels "${dataset}")"
	labels+=( "${new_label}" )
	zfs_set_labels "${dataset}" "${labels[*]}"
}

# remove a single label to the existing list of labels
function zfs_remove_label() {
	local dataset="${1}"
	local old_label="${2}"
	local labels
	read -ra labels <<< "$(zfs_get_labels "${dataset}")"
	local new_labels=( "${labels[@]/${old_label}}" )
	zfs_set_labels "${dataset}" "${new_labels[*]}"
}

# functions for checking zfs datasets
#####################################

# check if a dataset is bound to a specific label (or any label)
function zfs_is_bound() {
	local dataset="${1}"
	local label="${2:-}"

	if [[ -z "${label}" ]] && [[ -n "$(zfs_get_labels "${dataset}")" ]]; then
		return 0
	elif [[ -n "$(zfs_get_label "${dataset}" "${label}")" ]]; then
		return 0
	else
		return 1
	fi
}

# we can only load keys on encryptionroots
# it does not make sense to add a binding elsewhere
function zfs_is_encryptionroot() {
	local dataset="${1}"
	[[ "$(zfs_get_property "${dataset}" 'encryptionroot' -snone )" == "${dataset}" ]]
}

# does it even exist?
function zfs_is_dataset() {
	local dataset="${1}"
	zfs_get_property "${dataset}" 'name' -snone &>/dev/null
}


function check_valid_dataset() {
	local dataset="${1}"

	if ! zfs_is_dataset "${dataset}"; then
		error "${dataset} is not a zfs dataset!"
	fi

	if ! zfs_is_encryptionroot "${dataset}"; then
		error "given dataset is not an encryptionroot: ${dataset}"
	fi
}


# functions to deal with I/O to the user
function read_passphrase() {
	local dataset="${1}"
	local key="${2?need keyinput argument}"

	# Get the existing passphrase/keyfile.
	local existing_key
	local keyfile

	case "${key}" in
	"") IFS= read -r -s -p "Enter existing ZFS password for ${dataset}: " existing_key;
		echo >&2
		;;
	 -) IFS= read -r -s -p "" existing_key;;
	 *) keyfile="${key}"
		if [ -r "${keyfile}" ]; then
			existing_key="$(< "${keyfile}")"
		else
			error "cannot read key file '${keyfile}'"
		fi
		;;
	esac
	echo "${existing_key}"
}

function error() {
	usage
	echo >&2 -e "ERROR: ${*}"
	exit 1
}


# functions to deal with too large Clevis data for a single ZFS property
########################################################################

function cut_into_chunks() {
	fold -w "${zfs_userprop_value_limit}"
}

function zero_pad() {
	local width="${1}"; shift
	printf "%0${width}d " "${@}"
}

function num_list() {
	local last_index="${1}"
	local indices=()
	read -ra indices <<< "$(eval "echo {0..${last_index}}")"
	zero_pad "${#last_index}" "${indices[@]}"
}



# functions to add/remove a Clevis binding
#########################################
function zfs_bind_clevis_label() {
	local dataset="${1}"
	local label="${2}"
	local clevis_data="${3}"

	local zfs_label_prop="${zfs_label_prefix}:${label}"

	echo >&2 -n 'binding new Clevis data... '
	# use a single prop without number suffix if it will fit in one prop
	if [[ "${#clevis_data}" -lt "${zfs_userprop_value_limit}" ]]; then
		zfs_set_property "${dataset}" "${zfs_label_prop}" "${clevis_data}"
	else
		local clevis_chunks=()
		read -ra clevis_chunks <<< "$(cut_into_chunks <<<"${clevis_data}")"
		last_index="$(( "${#clevis_chunks[@]}" - 1 ))"
		width="${#last_index}"

		local chunk chunk_num
		for chunk_num in $(num_list "${last_index}"); do
			# bash assumes numbers are octal when prefixed with a 0, so we
			# remove it
			i="${chunk_num##0}"
			i="${i:-0}" # if we removed all zeroes, we are at the start
			chunk="${clevis_chunks[${i}]}"
			# e.g. latchset.clevis.label:${label}-01=chunk_data
			zfs_set_property "${dataset}" "${zfs_label_prop}-${chunk_num}" "${chunk}"
		done

		label="${label}:${last_index}"
	fi
	echo >&2 'ok'

	# check if unlocking works
	echo >&2 -n 'testing new Clevis data... '

	# somehow clevis-decrypt exits with a non-zero code, but still outputs the
	# correct data, so we ignore the exit code. zfs_test_key will fail anyway
	# if something goes wrong
	if ! unlock_with_label "${dataset}" "${label}" 'dry_run'; then
		zfs_unbind_clevis_label "${dataset}" "${label}"
		error "could not unlock dataset with clevis configuration: ${dataset}"
	fi

	echo >&2 'ok'
	zfs_add_label "${dataset}" "${label}"
}

function zfs_unbind_clevis_label() {
	local dataset="${1}"
	local label="${2%:*}"
	local last_index

	label="$(zfs_get_label "${dataset}" "${label}")"
	last_index="${label#*:}"
	label="${label%:*}"

	local zfs_label_prop="${zfs_label_prefix}:${label}"

	if [[ "${label}" == "${last_index}" ]]; then
		zfs_remove_property "${dataset}" "${zfs_label_prop}"
	else
		for num in $(num_list "${last_index}"); do
			zfs_remove_property "${dataset}" "${zfs_label_prop}-${num}"
		done
	fi
	zfs_remove_label "${dataset}" "${label}"
}


function zfs_get_clevis_label() {
	local dataset="${1}"
	local label="${2%:*}"
	local last_index="${2#*:}"

	local zfs_label_prop="${zfs_label_prefix}:${label}"
	if [[ "${label}" == "${last_index}" ]]; then
		zfs_get_property "${dataset}" "${zfs_label_prop}"
	else
		local clevis_data=()
		for num in $(num_list "${last_index}"); do
			clevis_data+=( "$(zfs_get_property "${dataset}" "${zfs_label_prop}-${num}")" )
		done
		local IFS=''
		echo "${clevis_data[*]}"
	fi
}


function unlock_with_label() {
	local dataset="${1}"
	local label="${2}"
	local test_only="${3:-}"

	# somehow clevis-decrypt exits with a non-zero code, but still outputs the
	# correct data, so we ignore the exit code. zfs_load_key will fail anyway
	# if something goes wrong
	zfs_get_clevis_label "${dataset}" "${label}" \
	| (clevis decrypt || true) \
	| zfs_load_key "${dataset}" "${test_only}"
}


if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	. clevis-zfs-test
	_test "$@"
fi
