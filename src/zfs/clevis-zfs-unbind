#!/bin/bash
set -euo pipefail

. clevis-zfs-common

SUMMARY="Unbinds a label from a ZFS dataset"


function usage() {
	cat >&2 <<-USAGE_END
		Usage: clevis zfs unbind [-k KEY] -d DATASET -l LABEL

		$SUMMARY:

		  -d DATASET  The zfs dataset on which to perform unbinding
		  -l LABEL    The label to unbind

		  -k KEY      Non-interactively read zfs password from KEY file
		  -k -        Non-interactively read zfs password from standard input

	USAGE_END
}


function main() {
	if [ $# -eq 1 ] && [ "${1:-}" == "--summary" ]; then
		echo "$SUMMARY"
		exit 0
	fi

	local dataset=
	local key=
	local label=
	local force_unbind='false'
	local unbind_all='false'
	while getopts "hafd:k:l:" o; do
		case "$o" in
		h) usage; exit 0;;
		a) unbind_all='true';;
		d) dataset="$OPTARG";;
		f) force_unbind='true';;
		k) key="$OPTARG";;
		l) label="$OPTARG";;
		*) error "unrecognized argument: -${o}";;
		esac
	done

	if [ -z "${dataset:-""}" ]; then
		error "did not specify a device!"
	fi

	if [[ "${force_unbind}" != 'true' ]]; then

		if ! zfs_is_bound "${dataset}"; then
			error "dataset is not bound with clevis: ${dataset}"
		fi

		local existing_key
		echo >&2 "Loading existing key... "
		existing_key="$(read_passphrase "${dataset}" "${key}")"

		if ! zfs_test_key "${dataset}" <<<"${existing_key}"; then
			error "given key does not unlock ${dataset}"
		fi
	fi



	echo >&2 -n 'wiping clevis data... '
	if [[ "${unbind_all}" == 'true' ]]; then
		labels="$(zfs_get_labels "${dataset}")"
		for label in ${labels}; do
			zfs_unbind_clevis_label "${dataset}" "${label}"
		done
	else
		zfs_unbind_clevis_label "${dataset}" "${label}"
	fi
	echo >&2 'ok'

}

main "${@}"
